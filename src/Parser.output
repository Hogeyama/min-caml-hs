-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------

state 12 contains 1 shift/reduce conflicts.
state 25 contains 6 shift/reduce conflicts.
state 26 contains 6 shift/reduce conflicts.
state 27 contains 6 shift/reduce conflicts.
state 31 contains 6 shift/reduce conflicts.
state 51 contains 6 shift/reduce conflicts.
state 52 contains 6 shift/reduce conflicts.
state 53 contains 6 shift/reduce conflicts.
state 54 contains 6 shift/reduce conflicts.
state 55 contains 6 shift/reduce conflicts.
state 56 contains 6 shift/reduce conflicts.
state 57 contains 6 shift/reduce conflicts.
state 58 contains 6 shift/reduce conflicts.
state 59 contains 6 shift/reduce conflicts.
state 60 contains 6 shift/reduce conflicts.
state 61 contains 6 shift/reduce conflicts.
state 62 contains 6 shift/reduce conflicts.
state 63 contains 6 shift/reduce conflicts.
state 64 contains 6 shift/reduce conflicts.
state 67 contains 6 shift/reduce conflicts.
state 93 contains 6 shift/reduce conflicts.
state 95 contains 6 shift/reduce conflicts.
state 98 contains 6 shift/reduce conflicts.
state 100 contains 6 shift/reduce conflicts.
state 102 contains 20 shift/reduce conflicts.

terminal eof is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCmd -> Expr                            (0)
	Expr -> SimpleExpr                                 (1)
	Expr -> not Expr                                   (2)
	Expr -> '-' Expr                                   (3)
	Expr -> Expr '+' Expr                              (4)
	Expr -> Expr '-' Expr                              (5)
	Expr -> Expr '=' Expr                              (6)
	Expr -> Expr '<>' Expr                             (7)
	Expr -> Expr '<' Expr                              (8)
	Expr -> Expr '>' Expr                              (9)
	Expr -> Expr '<=' Expr                             (10)
	Expr -> Expr '>=' Expr                             (11)
	Expr -> if Expr then Expr else Expr                (12)
	Expr -> '-.' Expr                                  (13)
	Expr -> Expr '+.' Expr                             (14)
	Expr -> Expr '-.' Expr                             (15)
	Expr -> Expr '*.' Expr                             (16)
	Expr -> Expr '/.' Expr                             (17)
	Expr -> let ID '=' Expr in Expr                    (18)
	Expr -> let rec FunDef in Expr                     (19)
	Expr -> Expr ActualArgs                            (20)
	Expr -> Elems                                      (21)
	Expr -> let '(' Pat ')' '=' Expr in Expr           (22)
	Expr -> SimpleExpr '.' '(' Expr ')' '<-' Expr      (23)
	Expr -> Expr ';' Expr                              (24)
	Expr -> ArrayCreate SimpleExpr SimpleExpr          (25)
	Expr -> error                                      (26)
	SimpleExpr -> '(' Expr ')'                         (27)
	SimpleExpr -> '(' ')'                              (28)
	SimpleExpr -> bool                                 (29)
	SimpleExpr -> int                                  (30)
	SimpleExpr -> float                                (31)
	SimpleExpr -> ID                                   (32)
	SimpleExpr -> SimpleExpr '.' '(' Expr ')'          (33)
	ID -> id                                           (34)
	ID -> wild                                         (35)
	FunDef -> ID FormalArgs '=' Expr                   (36)
	FormalArgs -> ID FormalArgs                        (37)
	FormalArgs -> ID                                   (38)
	ActualArgs -> ActualArgs SimpleExpr                (39)
	ActualArgs -> SimpleExpr                           (40)
	Elems -> Elems ',' Expr                            (41)
	Elems -> Expr ',' Expr                             (42)
	Pat -> Pat ',' ID                                  (43)
	Pat -> ID ',' ID                                   (44)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	bool           { TokenBool $$ }
	int            { TokenInt $$ }
	float          { TokenFloat $$ }
	not            { TokenNot }
	'-'            { TokenMinus }
	'+'            { TokenPlus }
	'-.'           { TokenMinusDot }
	'+.'           { TokenPlusDot }
	'*.'           { TokenAstDot }
	'/.'           { TokenSlashDot }
	'='            { TokenEq }
	'<>'           { TokenLtGt }
	'<='           { TokenLe }
	'>='           { TokenGe }
	'<'            { TokenLt }
	'>'            { TokenGt }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	id             { TokenID $$ }
	let            { TokenLet }
	in             { TokenIn }
	rec            { TokenRec }
	','            { TokenComma }
	ArrayCreate    { TokenArrayCreate }
	'.'            { TokenDot }
	'<-'           { TokenRArrow }
	';'            { TokenSemi }
	'('            { TokenLParen }
	')'            { TokenRParen }
	eof            { TokenEOF }
	wild           { TokenWild }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCmd rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	SimpleExpr      rules 27, 28, 29, 30, 31, 32, 33
	ID              rules 34, 35
	FunDef          rule  36
	FormalArgs      rules 37, 38
	ActualArgs      rules 39, 40
	Elems           rules 41, 42
	Pat             rules 43, 44

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 10
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 1


	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	id             shift, and enter state 7
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 2
	ID             goto state 3

State 2

	Expr -> SimpleExpr .                                (rule 1)
	SimpleExpr -> SimpleExpr . '.' '(' Expr ')'         (rule 33)

	'.'            shift, and enter state 48


State 3

	SimpleExpr -> ID .                                  (rule 32)

	bool           reduce using rule 32
	int            reduce using rule 32
	float          reduce using rule 32
	'-'            reduce using rule 32
	'+'            reduce using rule 32
	'-.'           reduce using rule 32
	'+.'           reduce using rule 32
	'*.'           reduce using rule 32
	'/.'           reduce using rule 32
	'='            reduce using rule 32
	'<>'           reduce using rule 32
	'<='           reduce using rule 32
	'>='           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	id             reduce using rule 32
	in             reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	wild           reduce using rule 32
	%eof           reduce using rule 32


State 4

	SimpleExpr -> bool .                                (rule 29)

	bool           reduce using rule 29
	int            reduce using rule 29
	float          reduce using rule 29
	'-'            reduce using rule 29
	'+'            reduce using rule 29
	'-.'           reduce using rule 29
	'+.'           reduce using rule 29
	'*.'           reduce using rule 29
	'/.'           reduce using rule 29
	'='            reduce using rule 29
	'<>'           reduce using rule 29
	'<='           reduce using rule 29
	'>='           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	id             reduce using rule 29
	in             reduce using rule 29
	','            reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	wild           reduce using rule 29
	%eof           reduce using rule 29


State 5

	SimpleExpr -> int .                                 (rule 30)

	bool           reduce using rule 30
	int            reduce using rule 30
	float          reduce using rule 30
	'-'            reduce using rule 30
	'+'            reduce using rule 30
	'-.'           reduce using rule 30
	'+.'           reduce using rule 30
	'*.'           reduce using rule 30
	'/.'           reduce using rule 30
	'='            reduce using rule 30
	'<>'           reduce using rule 30
	'<='           reduce using rule 30
	'>='           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	id             reduce using rule 30
	in             reduce using rule 30
	','            reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	wild           reduce using rule 30
	%eof           reduce using rule 30


State 6

	SimpleExpr -> float .                               (rule 31)

	bool           reduce using rule 31
	int            reduce using rule 31
	float          reduce using rule 31
	'-'            reduce using rule 31
	'+'            reduce using rule 31
	'-.'           reduce using rule 31
	'+.'           reduce using rule 31
	'*.'           reduce using rule 31
	'/.'           reduce using rule 31
	'='            reduce using rule 31
	'<>'           reduce using rule 31
	'<='           reduce using rule 31
	'>='           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	id             reduce using rule 31
	in             reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	wild           reduce using rule 31
	%eof           reduce using rule 31


State 7

	ID -> id .                                          (rule 34)

	bool           reduce using rule 34
	int            reduce using rule 34
	float          reduce using rule 34
	'-'            reduce using rule 34
	'+'            reduce using rule 34
	'-.'           reduce using rule 34
	'+.'           reduce using rule 34
	'*.'           reduce using rule 34
	'/.'           reduce using rule 34
	'='            reduce using rule 34
	'<>'           reduce using rule 34
	'<='           reduce using rule 34
	'>='           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	id             reduce using rule 34
	in             reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	wild           reduce using rule 34
	%eof           reduce using rule 34


State 8

	SimpleExpr -> '(' . Expr ')'                        (rule 27)
	SimpleExpr -> '(' . ')'                             (rule 28)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	')'            shift, and enter state 47
	wild           shift, and enter state 9

	Expr           goto state 46
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 9

	ID -> wild .                                        (rule 35)

	bool           reduce using rule 35
	int            reduce using rule 35
	float          reduce using rule 35
	'-'            reduce using rule 35
	'+'            reduce using rule 35
	'-.'           reduce using rule 35
	'+.'           reduce using rule 35
	'*.'           reduce using rule 35
	'/.'           reduce using rule 35
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'<='           reduce using rule 35
	'>='           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	id             reduce using rule 35
	in             reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	wild           reduce using rule 35
	%eof           reduce using rule 35


State 10

	%start_parseCmd -> Expr .                           (rule 0)
	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	wild           shift, and enter state 9
	%eof           accept

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 11

	Expr -> SimpleExpr .                                (rule 1)
	Expr -> SimpleExpr . '.' '(' Expr ')' '<-' Expr     (rule 23)
	SimpleExpr -> SimpleExpr . '.' '(' Expr ')'         (rule 33)

	bool           reduce using rule 1
	int            reduce using rule 1
	float          reduce using rule 1
	'-'            reduce using rule 1
	'+'            reduce using rule 1
	'-.'           reduce using rule 1
	'+.'           reduce using rule 1
	'*.'           reduce using rule 1
	'/.'           reduce using rule 1
	'='            reduce using rule 1
	'<>'           reduce using rule 1
	'<='           reduce using rule 1
	'>='           reduce using rule 1
	'<'            reduce using rule 1
	'>'            reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	id             reduce using rule 1
	in             reduce using rule 1
	','            reduce using rule 1
	'.'            shift, and enter state 29
	';'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	wild           reduce using rule 1
	%eof           reduce using rule 1


State 12

	Expr -> Elems .                                     (rule 21)
	Elems -> Elems . ',' Expr                           (rule 41)

	bool           reduce using rule 21
	int            reduce using rule 21
	float          reduce using rule 21
	'-'            reduce using rule 21
	'+'            reduce using rule 21
	'-.'           reduce using rule 21
	'+.'           reduce using rule 21
	'*.'           reduce using rule 21
	'/.'           reduce using rule 21
	'='            reduce using rule 21
	'<>'           reduce using rule 21
	'<='           reduce using rule 21
	'>='           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	id             reduce using rule 21
	in             reduce using rule 21
	','            shift, and enter state 28
			(reduce using rule 21)

	';'            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	wild           reduce using rule 21
	%eof           reduce using rule 21


State 13

	Expr -> error .                                     (rule 26)

	bool           reduce using rule 26
	int            reduce using rule 26
	float          reduce using rule 26
	'-'            reduce using rule 26
	'+'            reduce using rule 26
	'-.'           reduce using rule 26
	'+.'           reduce using rule 26
	'*.'           reduce using rule 26
	'/.'           reduce using rule 26
	'='            reduce using rule 26
	'<>'           reduce using rule 26
	'<='           reduce using rule 26
	'>='           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	id             reduce using rule 26
	in             reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	wild           reduce using rule 26
	%eof           reduce using rule 26


State 14

	Expr -> not . Expr                                  (rule 2)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 27
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 15

	Expr -> '-' . Expr                                  (rule 3)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 26
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 16

	Expr -> '-.' . Expr                                 (rule 13)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 25
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 17

	Expr -> if . Expr then Expr else Expr               (rule 12)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 24
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 18

	Expr -> let . ID '=' Expr in Expr                   (rule 18)
	Expr -> let . rec FunDef in Expr                    (rule 19)
	Expr -> let . '(' Pat ')' '=' Expr in Expr          (rule 22)

	id             shift, and enter state 7
	rec            shift, and enter state 22
	'('            shift, and enter state 23
	wild           shift, and enter state 9

	ID             goto state 21

State 19

	Expr -> ArrayCreate . SimpleExpr SimpleExpr         (rule 25)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	id             shift, and enter state 7
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 20
	ID             goto state 3

State 20

	Expr -> ArrayCreate SimpleExpr . SimpleExpr         (rule 25)
	SimpleExpr -> SimpleExpr . '.' '(' Expr ')'         (rule 33)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	id             shift, and enter state 7
	'.'            shift, and enter state 48
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 74
	ID             goto state 3

State 21

	Expr -> let ID . '=' Expr in Expr                   (rule 18)

	'='            shift, and enter state 73


State 22

	Expr -> let rec . FunDef in Expr                    (rule 19)

	id             shift, and enter state 7
	wild           shift, and enter state 9

	ID             goto state 71
	FunDef         goto state 72

State 23

	Expr -> let '(' . Pat ')' '=' Expr in Expr          (rule 22)

	id             shift, and enter state 7
	wild           shift, and enter state 9

	ID             goto state 69
	Pat            goto state 70

State 24

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> if Expr . then Expr else Expr               (rule 12)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           shift, and enter state 68
	id             shift, and enter state 7
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 25

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> '-.' Expr .                                 (rule 13)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 13)

	int            shift, and enter state 5
			(reduce using rule 13)

	float          shift, and enter state 6
			(reduce using rule 13)

	'-'            reduce using rule 13
	'+'            reduce using rule 13
	'-.'           reduce using rule 13
	'+.'           reduce using rule 13
	'*.'           reduce using rule 13
	'/.'           reduce using rule 13
	'='            reduce using rule 13
	'<>'           reduce using rule 13
	'<='           reduce using rule 13
	'>='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	id             shift, and enter state 7
			(reduce using rule 13)

	in             reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	'('            shift, and enter state 8
			(reduce using rule 13)

	')'            reduce using rule 13
	wild           shift, and enter state 9
			(reduce using rule 13)

	%eof           reduce using rule 13

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 26

	Expr -> '-' Expr .                                  (rule 3)
	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 3)

	int            shift, and enter state 5
			(reduce using rule 3)

	float          shift, and enter state 6
			(reduce using rule 3)

	'-'            reduce using rule 3
	'+'            reduce using rule 3
	'-.'           reduce using rule 3
	'+.'           reduce using rule 3
	'*.'           reduce using rule 3
	'/.'           reduce using rule 3
	'='            reduce using rule 3
	'<>'           reduce using rule 3
	'<='           reduce using rule 3
	'>='           reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	id             shift, and enter state 7
			(reduce using rule 3)

	in             reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	'('            shift, and enter state 8
			(reduce using rule 3)

	')'            reduce using rule 3
	wild           shift, and enter state 9
			(reduce using rule 3)

	%eof           reduce using rule 3

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 27

	Expr -> not Expr .                                  (rule 2)
	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 2)

	int            shift, and enter state 5
			(reduce using rule 2)

	float          shift, and enter state 6
			(reduce using rule 2)

	'-'            reduce using rule 2
	'+'            reduce using rule 2
	'-.'           reduce using rule 2
	'+.'           reduce using rule 2
	'*.'           reduce using rule 2
	'/.'           reduce using rule 2
	'='            reduce using rule 2
	'<>'           reduce using rule 2
	'<='           reduce using rule 2
	'>='           reduce using rule 2
	'<'            reduce using rule 2
	'>'            reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	id             shift, and enter state 7
			(reduce using rule 2)

	in             reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'('            shift, and enter state 8
			(reduce using rule 2)

	')'            reduce using rule 2
	wild           shift, and enter state 9
			(reduce using rule 2)

	%eof           reduce using rule 2

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 28

	Elems -> Elems ',' . Expr                           (rule 41)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 67
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 29

	Expr -> SimpleExpr '.' . '(' Expr ')' '<-' Expr     (rule 23)
	SimpleExpr -> SimpleExpr '.' . '(' Expr ')'         (rule 33)

	'('            shift, and enter state 66


State 30

	SimpleExpr -> SimpleExpr . '.' '(' Expr ')'         (rule 33)
	ActualArgs -> SimpleExpr .                          (rule 40)

	bool           reduce using rule 40
	int            reduce using rule 40
	float          reduce using rule 40
	'-'            reduce using rule 40
	'+'            reduce using rule 40
	'-.'           reduce using rule 40
	'+.'           reduce using rule 40
	'*.'           reduce using rule 40
	'/.'           reduce using rule 40
	'='            reduce using rule 40
	'<>'           reduce using rule 40
	'<='           reduce using rule 40
	'>='           reduce using rule 40
	'<'            reduce using rule 40
	'>'            reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	id             reduce using rule 40
	in             reduce using rule 40
	','            reduce using rule 40
	'.'            shift, and enter state 48
	';'            reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	wild           reduce using rule 40
	%eof           reduce using rule 40


State 31

	Expr -> Expr ActualArgs .                           (rule 20)
	ActualArgs -> ActualArgs . SimpleExpr               (rule 39)

	bool           shift, and enter state 4
			(reduce using rule 20)

	int            shift, and enter state 5
			(reduce using rule 20)

	float          shift, and enter state 6
			(reduce using rule 20)

	'-'            reduce using rule 20
	'+'            reduce using rule 20
	'-.'           reduce using rule 20
	'+.'           reduce using rule 20
	'*.'           reduce using rule 20
	'/.'           reduce using rule 20
	'='            reduce using rule 20
	'<>'           reduce using rule 20
	'<='           reduce using rule 20
	'>='           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	id             shift, and enter state 7
			(reduce using rule 20)

	in             reduce using rule 20
	','            reduce using rule 20
	';'            reduce using rule 20
	'('            shift, and enter state 8
			(reduce using rule 20)

	')'            reduce using rule 20
	wild           shift, and enter state 9
			(reduce using rule 20)

	%eof           reduce using rule 20

	SimpleExpr     goto state 65
	ID             goto state 3

State 32

	Expr -> Expr '-' . Expr                             (rule 5)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 64
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 33

	Expr -> Expr '+' . Expr                             (rule 4)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 63
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 34

	Expr -> Expr '-.' . Expr                            (rule 15)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 62
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 35

	Expr -> Expr '+.' . Expr                            (rule 14)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 61
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 36

	Expr -> Expr '*.' . Expr                            (rule 16)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 60
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 37

	Expr -> Expr '/.' . Expr                            (rule 17)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 59
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 38

	Expr -> Expr '=' . Expr                             (rule 6)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 58
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 39

	Expr -> Expr '<>' . Expr                            (rule 7)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 57
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 40

	Expr -> Expr '<=' . Expr                            (rule 10)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 56
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 41

	Expr -> Expr '>=' . Expr                            (rule 11)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 55
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 42

	Expr -> Expr '<' . Expr                             (rule 8)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 54
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 43

	Expr -> Expr '>' . Expr                             (rule 9)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 53
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 44

	Elems -> Expr ',' . Expr                            (rule 42)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 52
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 45

	Expr -> Expr ';' . Expr                             (rule 24)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 51
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 46

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	SimpleExpr -> '(' Expr . ')'                        (rule 27)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	')'            shift, and enter state 50
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 47

	SimpleExpr -> '(' ')' .                             (rule 28)

	bool           reduce using rule 28
	int            reduce using rule 28
	float          reduce using rule 28
	'-'            reduce using rule 28
	'+'            reduce using rule 28
	'-.'           reduce using rule 28
	'+.'           reduce using rule 28
	'*.'           reduce using rule 28
	'/.'           reduce using rule 28
	'='            reduce using rule 28
	'<>'           reduce using rule 28
	'<='           reduce using rule 28
	'>='           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	id             reduce using rule 28
	in             reduce using rule 28
	','            reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	wild           reduce using rule 28
	%eof           reduce using rule 28


State 48

	SimpleExpr -> SimpleExpr '.' . '(' Expr ')'         (rule 33)

	'('            shift, and enter state 49


State 49

	SimpleExpr -> SimpleExpr '.' '(' . Expr ')'         (rule 33)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 84
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 50

	SimpleExpr -> '(' Expr ')' .                        (rule 27)

	bool           reduce using rule 27
	int            reduce using rule 27
	float          reduce using rule 27
	'-'            reduce using rule 27
	'+'            reduce using rule 27
	'-.'           reduce using rule 27
	'+.'           reduce using rule 27
	'*.'           reduce using rule 27
	'/.'           reduce using rule 27
	'='            reduce using rule 27
	'<>'           reduce using rule 27
	'<='           reduce using rule 27
	'>='           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	id             reduce using rule 27
	in             reduce using rule 27
	','            reduce using rule 27
	'.'            reduce using rule 27
	';'            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	wild           reduce using rule 27
	%eof           reduce using rule 27


State 51

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Expr -> Expr ';' Expr .                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 24)

	int            shift, and enter state 5
			(reduce using rule 24)

	float          shift, and enter state 6
			(reduce using rule 24)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 24
	else           reduce using rule 24
	id             shift, and enter state 7
			(reduce using rule 24)

	in             reduce using rule 24
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
			(reduce using rule 24)

	')'            reduce using rule 24
	wild           shift, and enter state 9
			(reduce using rule 24)

	%eof           reduce using rule 24

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 52

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)
	Elems -> Expr ',' Expr .                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 42)

	int            shift, and enter state 5
			(reduce using rule 42)

	float          shift, and enter state 6
			(reduce using rule 42)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 42
	else           reduce using rule 42
	id             shift, and enter state 7
			(reduce using rule 42)

	in             reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'('            shift, and enter state 8
			(reduce using rule 42)

	')'            reduce using rule 42
	wild           shift, and enter state 9
			(reduce using rule 42)

	%eof           reduce using rule 42

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 53

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr '>' Expr .                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 9)

	int            shift, and enter state 5
			(reduce using rule 9)

	float          shift, and enter state 6
			(reduce using rule 9)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 9
	'<>'           reduce using rule 9
	'<='           reduce using rule 9
	'>='           reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	id             shift, and enter state 7
			(reduce using rule 9)

	in             reduce using rule 9
	','            reduce using rule 9
	';'            reduce using rule 9
	'('            shift, and enter state 8
			(reduce using rule 9)

	')'            reduce using rule 9
	wild           shift, and enter state 9
			(reduce using rule 9)

	%eof           reduce using rule 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 54

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr '<' Expr .                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 8)

	int            shift, and enter state 5
			(reduce using rule 8)

	float          shift, and enter state 6
			(reduce using rule 8)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 8
	'<>'           reduce using rule 8
	'<='           reduce using rule 8
	'>='           reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	id             shift, and enter state 7
			(reduce using rule 8)

	in             reduce using rule 8
	','            reduce using rule 8
	';'            reduce using rule 8
	'('            shift, and enter state 8
			(reduce using rule 8)

	')'            reduce using rule 8
	wild           shift, and enter state 9
			(reduce using rule 8)

	%eof           reduce using rule 8

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 55

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr '>=' Expr .                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 11)

	int            shift, and enter state 5
			(reduce using rule 11)

	float          shift, and enter state 6
			(reduce using rule 11)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 11
	'<>'           reduce using rule 11
	'<='           reduce using rule 11
	'>='           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	id             shift, and enter state 7
			(reduce using rule 11)

	in             reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	'('            shift, and enter state 8
			(reduce using rule 11)

	')'            reduce using rule 11
	wild           shift, and enter state 9
			(reduce using rule 11)

	%eof           reduce using rule 11

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 56

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr '<=' Expr .                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 10)

	int            shift, and enter state 5
			(reduce using rule 10)

	float          shift, and enter state 6
			(reduce using rule 10)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 10
	'<>'           reduce using rule 10
	'<='           reduce using rule 10
	'>='           reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	id             shift, and enter state 7
			(reduce using rule 10)

	in             reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	'('            shift, and enter state 8
			(reduce using rule 10)

	')'            reduce using rule 10
	wild           shift, and enter state 9
			(reduce using rule 10)

	%eof           reduce using rule 10

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 57

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr '<>' Expr .                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 7)

	int            shift, and enter state 5
			(reduce using rule 7)

	float          shift, and enter state 6
			(reduce using rule 7)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 7
	'<>'           reduce using rule 7
	'<='           reduce using rule 7
	'>='           reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	id             shift, and enter state 7
			(reduce using rule 7)

	in             reduce using rule 7
	','            reduce using rule 7
	';'            reduce using rule 7
	'('            shift, and enter state 8
			(reduce using rule 7)

	')'            reduce using rule 7
	wild           shift, and enter state 9
			(reduce using rule 7)

	%eof           reduce using rule 7

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 58

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr '=' Expr .                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 6)

	int            shift, and enter state 5
			(reduce using rule 6)

	float          shift, and enter state 6
			(reduce using rule 6)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 6
	'<>'           reduce using rule 6
	'<='           reduce using rule 6
	'>='           reduce using rule 6
	'<'            reduce using rule 6
	'>'            reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	id             shift, and enter state 7
			(reduce using rule 6)

	in             reduce using rule 6
	','            reduce using rule 6
	';'            reduce using rule 6
	'('            shift, and enter state 8
			(reduce using rule 6)

	')'            reduce using rule 6
	wild           shift, and enter state 9
			(reduce using rule 6)

	%eof           reduce using rule 6

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 59

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr '/.' Expr .                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 17)

	int            shift, and enter state 5
			(reduce using rule 17)

	float          shift, and enter state 6
			(reduce using rule 17)

	'-'            reduce using rule 17
	'+'            reduce using rule 17
	'-.'           reduce using rule 17
	'+.'           reduce using rule 17
	'*.'           reduce using rule 17
	'/.'           reduce using rule 17
	'='            reduce using rule 17
	'<>'           reduce using rule 17
	'<='           reduce using rule 17
	'>='           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	id             shift, and enter state 7
			(reduce using rule 17)

	in             reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	'('            shift, and enter state 8
			(reduce using rule 17)

	')'            reduce using rule 17
	wild           shift, and enter state 9
			(reduce using rule 17)

	%eof           reduce using rule 17

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 60

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr '*.' Expr .                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 16)

	int            shift, and enter state 5
			(reduce using rule 16)

	float          shift, and enter state 6
			(reduce using rule 16)

	'-'            reduce using rule 16
	'+'            reduce using rule 16
	'-.'           reduce using rule 16
	'+.'           reduce using rule 16
	'*.'           reduce using rule 16
	'/.'           reduce using rule 16
	'='            reduce using rule 16
	'<>'           reduce using rule 16
	'<='           reduce using rule 16
	'>='           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	id             shift, and enter state 7
			(reduce using rule 16)

	in             reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	'('            shift, and enter state 8
			(reduce using rule 16)

	')'            reduce using rule 16
	wild           shift, and enter state 9
			(reduce using rule 16)

	%eof           reduce using rule 16

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 61

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr '+.' Expr .                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 14)

	int            shift, and enter state 5
			(reduce using rule 14)

	float          shift, and enter state 6
			(reduce using rule 14)

	'-'            reduce using rule 14
	'+'            reduce using rule 14
	'-.'           reduce using rule 14
	'+.'           reduce using rule 14
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 14
	'<>'           reduce using rule 14
	'<='           reduce using rule 14
	'>='           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	id             shift, and enter state 7
			(reduce using rule 14)

	in             reduce using rule 14
	','            reduce using rule 14
	';'            reduce using rule 14
	'('            shift, and enter state 8
			(reduce using rule 14)

	')'            reduce using rule 14
	wild           shift, and enter state 9
			(reduce using rule 14)

	%eof           reduce using rule 14

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 62

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr '-.' Expr .                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 15)

	int            shift, and enter state 5
			(reduce using rule 15)

	float          shift, and enter state 6
			(reduce using rule 15)

	'-'            reduce using rule 15
	'+'            reduce using rule 15
	'-.'           reduce using rule 15
	'+.'           reduce using rule 15
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 15
	'<>'           reduce using rule 15
	'<='           reduce using rule 15
	'>='           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	id             shift, and enter state 7
			(reduce using rule 15)

	in             reduce using rule 15
	','            reduce using rule 15
	';'            reduce using rule 15
	'('            shift, and enter state 8
			(reduce using rule 15)

	')'            reduce using rule 15
	wild           shift, and enter state 9
			(reduce using rule 15)

	%eof           reduce using rule 15

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 63

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr '+' Expr .                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 4)

	int            shift, and enter state 5
			(reduce using rule 4)

	float          shift, and enter state 6
			(reduce using rule 4)

	'-'            reduce using rule 4
	'+'            reduce using rule 4
	'-.'           reduce using rule 4
	'+.'           reduce using rule 4
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 4
	'<>'           reduce using rule 4
	'<='           reduce using rule 4
	'>='           reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	id             shift, and enter state 7
			(reduce using rule 4)

	in             reduce using rule 4
	','            reduce using rule 4
	';'            reduce using rule 4
	'('            shift, and enter state 8
			(reduce using rule 4)

	')'            reduce using rule 4
	wild           shift, and enter state 9
			(reduce using rule 4)

	%eof           reduce using rule 4

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 64

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr '-' Expr .                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 5)

	int            shift, and enter state 5
			(reduce using rule 5)

	float          shift, and enter state 6
			(reduce using rule 5)

	'-'            reduce using rule 5
	'+'            reduce using rule 5
	'-.'           reduce using rule 5
	'+.'           reduce using rule 5
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            reduce using rule 5
	'<>'           reduce using rule 5
	'<='           reduce using rule 5
	'>='           reduce using rule 5
	'<'            reduce using rule 5
	'>'            reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	id             shift, and enter state 7
			(reduce using rule 5)

	in             reduce using rule 5
	','            reduce using rule 5
	';'            reduce using rule 5
	'('            shift, and enter state 8
			(reduce using rule 5)

	')'            reduce using rule 5
	wild           shift, and enter state 9
			(reduce using rule 5)

	%eof           reduce using rule 5

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 65

	SimpleExpr -> SimpleExpr . '.' '(' Expr ')'         (rule 33)
	ActualArgs -> ActualArgs SimpleExpr .               (rule 39)

	bool           reduce using rule 39
	int            reduce using rule 39
	float          reduce using rule 39
	'-'            reduce using rule 39
	'+'            reduce using rule 39
	'-.'           reduce using rule 39
	'+.'           reduce using rule 39
	'*.'           reduce using rule 39
	'/.'           reduce using rule 39
	'='            reduce using rule 39
	'<>'           reduce using rule 39
	'<='           reduce using rule 39
	'>='           reduce using rule 39
	'<'            reduce using rule 39
	'>'            reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	id             reduce using rule 39
	in             reduce using rule 39
	','            reduce using rule 39
	'.'            shift, and enter state 48
	';'            reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	wild           reduce using rule 39
	%eof           reduce using rule 39


State 66

	Expr -> SimpleExpr '.' '(' . Expr ')' '<-' Expr     (rule 23)
	SimpleExpr -> SimpleExpr '.' '(' . Expr ')'         (rule 33)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 83
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 67

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Elems ',' Expr .                           (rule 41)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 41)

	int            shift, and enter state 5
			(reduce using rule 41)

	float          shift, and enter state 6
			(reduce using rule 41)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 41
	else           reduce using rule 41
	id             shift, and enter state 7
			(reduce using rule 41)

	in             reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	'('            shift, and enter state 8
			(reduce using rule 41)

	')'            reduce using rule 41
	wild           shift, and enter state 9
			(reduce using rule 41)

	%eof           reduce using rule 41

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 68

	Expr -> if Expr then . Expr else Expr               (rule 12)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 82
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 69

	Pat -> ID . ',' ID                                  (rule 44)

	','            shift, and enter state 81


State 70

	Expr -> let '(' Pat . ')' '=' Expr in Expr          (rule 22)
	Pat -> Pat . ',' ID                                 (rule 43)

	','            shift, and enter state 79
	')'            shift, and enter state 80


State 71

	FunDef -> ID . FormalArgs '=' Expr                  (rule 36)

	id             shift, and enter state 7
	wild           shift, and enter state 9

	ID             goto state 77
	FormalArgs     goto state 78

State 72

	Expr -> let rec FunDef . in Expr                    (rule 19)

	in             shift, and enter state 76


State 73

	Expr -> let ID '=' . Expr in Expr                   (rule 18)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 75
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 74

	Expr -> ArrayCreate SimpleExpr SimpleExpr .         (rule 25)
	SimpleExpr -> SimpleExpr . '.' '(' Expr ')'         (rule 33)

	bool           reduce using rule 25
	int            reduce using rule 25
	float          reduce using rule 25
	'-'            reduce using rule 25
	'+'            reduce using rule 25
	'-.'           reduce using rule 25
	'+.'           reduce using rule 25
	'*.'           reduce using rule 25
	'/.'           reduce using rule 25
	'='            reduce using rule 25
	'<>'           reduce using rule 25
	'<='           reduce using rule 25
	'>='           reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	id             reduce using rule 25
	in             reduce using rule 25
	','            reduce using rule 25
	'.'            shift, and enter state 48
	';'            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	wild           reduce using rule 25
	%eof           reduce using rule 25


State 75

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> let ID '=' Expr . in Expr                   (rule 18)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	in             shift, and enter state 94
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 76

	Expr -> let rec FunDef in . Expr                    (rule 19)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 93
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 77

	FormalArgs -> ID . FormalArgs                       (rule 37)
	FormalArgs -> ID .                                  (rule 38)

	'='            reduce using rule 38
	id             shift, and enter state 7
	wild           shift, and enter state 9

	ID             goto state 77
	FormalArgs     goto state 92

State 78

	FunDef -> ID FormalArgs . '=' Expr                  (rule 36)

	'='            shift, and enter state 91


State 79

	Pat -> Pat ',' . ID                                 (rule 43)

	id             shift, and enter state 7
	wild           shift, and enter state 9

	ID             goto state 90

State 80

	Expr -> let '(' Pat ')' . '=' Expr in Expr          (rule 22)

	'='            shift, and enter state 89


State 81

	Pat -> ID ',' . ID                                  (rule 44)

	id             shift, and enter state 7
	wild           shift, and enter state 9

	ID             goto state 88

State 82

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> if Expr then Expr . else Expr               (rule 12)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	else           shift, and enter state 87
	id             shift, and enter state 7
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 83

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> SimpleExpr '.' '(' Expr . ')' '<-' Expr     (rule 23)
	Expr -> Expr . ';' Expr                             (rule 24)
	SimpleExpr -> SimpleExpr '.' '(' Expr . ')'         (rule 33)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	')'            shift, and enter state 86
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 84

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	SimpleExpr -> SimpleExpr '.' '(' Expr . ')'         (rule 33)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	')'            shift, and enter state 85
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 85

	SimpleExpr -> SimpleExpr '.' '(' Expr ')' .         (rule 33)

	bool           reduce using rule 33
	int            reduce using rule 33
	float          reduce using rule 33
	'-'            reduce using rule 33
	'+'            reduce using rule 33
	'-.'           reduce using rule 33
	'+.'           reduce using rule 33
	'*.'           reduce using rule 33
	'/.'           reduce using rule 33
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	id             reduce using rule 33
	in             reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	wild           reduce using rule 33
	%eof           reduce using rule 33


State 86

	Expr -> SimpleExpr '.' '(' Expr ')' . '<-' Expr     (rule 23)
	SimpleExpr -> SimpleExpr '.' '(' Expr ')' .         (rule 33)

	bool           reduce using rule 33
	int            reduce using rule 33
	float          reduce using rule 33
	'-'            reduce using rule 33
	'+'            reduce using rule 33
	'-.'           reduce using rule 33
	'+.'           reduce using rule 33
	'*.'           reduce using rule 33
	'/.'           reduce using rule 33
	'='            reduce using rule 33
	'<>'           reduce using rule 33
	'<='           reduce using rule 33
	'>='           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	id             reduce using rule 33
	in             reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	'<-'           shift, and enter state 99
	';'            reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	wild           reduce using rule 33
	%eof           reduce using rule 33


State 87

	Expr -> if Expr then Expr else . Expr               (rule 12)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 98
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 88

	Pat -> ID ',' ID .                                  (rule 44)

	','            reduce using rule 44
	')'            reduce using rule 44


State 89

	Expr -> let '(' Pat ')' '=' . Expr in Expr          (rule 22)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 97
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 90

	Pat -> Pat ',' ID .                                 (rule 43)

	','            reduce using rule 43
	')'            reduce using rule 43


State 91

	FunDef -> ID FormalArgs '=' . Expr                  (rule 36)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 96
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 92

	FormalArgs -> ID FormalArgs .                       (rule 37)

	'='            reduce using rule 37


State 93

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> let rec FunDef in Expr .                    (rule 19)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 19)

	int            shift, and enter state 5
			(reduce using rule 19)

	float          shift, and enter state 6
			(reduce using rule 19)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 19
	else           reduce using rule 19
	id             shift, and enter state 7
			(reduce using rule 19)

	in             reduce using rule 19
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
			(reduce using rule 19)

	')'            reduce using rule 19
	wild           shift, and enter state 9
			(reduce using rule 19)

	%eof           reduce using rule 19

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 94

	Expr -> let ID '=' Expr in . Expr                   (rule 18)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 95
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 95

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> let ID '=' Expr in Expr .                   (rule 18)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 18)

	int            shift, and enter state 5
			(reduce using rule 18)

	float          shift, and enter state 6
			(reduce using rule 18)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 18
	else           reduce using rule 18
	id             shift, and enter state 7
			(reduce using rule 18)

	in             reduce using rule 18
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
			(reduce using rule 18)

	')'            reduce using rule 18
	wild           shift, and enter state 9
			(reduce using rule 18)

	%eof           reduce using rule 18

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 96

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	FunDef -> ID FormalArgs '=' Expr .                  (rule 36)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	in             reduce using rule 36
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 97

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> let '(' Pat ')' '=' Expr . in Expr          (rule 22)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	id             shift, and enter state 7
	in             shift, and enter state 101
	','            shift, and enter state 44
	';'            shift, and enter state 45
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 98

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> if Expr then Expr else Expr .               (rule 12)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 12)

	int            shift, and enter state 5
			(reduce using rule 12)

	float          shift, and enter state 6
			(reduce using rule 12)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 12
	else           reduce using rule 12
	id             shift, and enter state 7
			(reduce using rule 12)

	in             reduce using rule 12
	','            shift, and enter state 44
	';'            reduce using rule 12
	'('            shift, and enter state 8
			(reduce using rule 12)

	')'            reduce using rule 12
	wild           shift, and enter state 9
			(reduce using rule 12)

	%eof           reduce using rule 12

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 99

	Expr -> SimpleExpr '.' '(' Expr ')' '<-' . Expr     (rule 23)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 100
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 100

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> SimpleExpr '.' '(' Expr ')' '<-' Expr .     (rule 23)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 23)

	int            shift, and enter state 5
			(reduce using rule 23)

	float          shift, and enter state 6
			(reduce using rule 23)

	'-'            shift, and enter state 32
	'+'            shift, and enter state 33
	'-.'           shift, and enter state 34
	'+.'           shift, and enter state 35
	'*.'           shift, and enter state 36
	'/.'           shift, and enter state 37
	'='            shift, and enter state 38
	'<>'           shift, and enter state 39
	'<='           shift, and enter state 40
	'>='           shift, and enter state 41
	'<'            shift, and enter state 42
	'>'            shift, and enter state 43
	then           reduce using rule 23
	else           reduce using rule 23
	id             shift, and enter state 7
			(reduce using rule 23)

	in             reduce using rule 23
	','            shift, and enter state 44
	';'            reduce using rule 23
	'('            shift, and enter state 8
			(reduce using rule 23)

	')'            reduce using rule 23
	wild           shift, and enter state 9
			(reduce using rule 23)

	%eof           reduce using rule 23

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

State 101

	Expr -> let '(' Pat ')' '=' Expr in . Expr          (rule 22)

	error          shift, and enter state 13
	bool           shift, and enter state 4
	int            shift, and enter state 5
	float          shift, and enter state 6
	not            shift, and enter state 14
	'-'            shift, and enter state 15
	'-.'           shift, and enter state 16
	if             shift, and enter state 17
	id             shift, and enter state 7
	let            shift, and enter state 18
	ArrayCreate    shift, and enter state 19
	'('            shift, and enter state 8
	wild           shift, and enter state 9

	Expr           goto state 102
	SimpleExpr     goto state 11
	ID             goto state 3
	Elems          goto state 12

State 102

	Expr -> Expr . '+' Expr                             (rule 4)
	Expr -> Expr . '-' Expr                             (rule 5)
	Expr -> Expr . '=' Expr                             (rule 6)
	Expr -> Expr . '<>' Expr                            (rule 7)
	Expr -> Expr . '<' Expr                             (rule 8)
	Expr -> Expr . '>' Expr                             (rule 9)
	Expr -> Expr . '<=' Expr                            (rule 10)
	Expr -> Expr . '>=' Expr                            (rule 11)
	Expr -> Expr . '+.' Expr                            (rule 14)
	Expr -> Expr . '-.' Expr                            (rule 15)
	Expr -> Expr . '*.' Expr                            (rule 16)
	Expr -> Expr . '/.' Expr                            (rule 17)
	Expr -> Expr . ActualArgs                           (rule 20)
	Expr -> let '(' Pat ')' '=' Expr in Expr .          (rule 22)
	Expr -> Expr . ';' Expr                             (rule 24)
	Elems -> Expr . ',' Expr                            (rule 42)

	bool           shift, and enter state 4
			(reduce using rule 22)

	int            shift, and enter state 5
			(reduce using rule 22)

	float          shift, and enter state 6
			(reduce using rule 22)

	'-'            shift, and enter state 32
			(reduce using rule 22)

	'+'            shift, and enter state 33
			(reduce using rule 22)

	'-.'           shift, and enter state 34
			(reduce using rule 22)

	'+.'           shift, and enter state 35
			(reduce using rule 22)

	'*.'           shift, and enter state 36
			(reduce using rule 22)

	'/.'           shift, and enter state 37
			(reduce using rule 22)

	'='            shift, and enter state 38
			(reduce using rule 22)

	'<>'           shift, and enter state 39
			(reduce using rule 22)

	'<='           shift, and enter state 40
			(reduce using rule 22)

	'>='           shift, and enter state 41
			(reduce using rule 22)

	'<'            shift, and enter state 42
			(reduce using rule 22)

	'>'            shift, and enter state 43
			(reduce using rule 22)

	then           reduce using rule 22
	else           reduce using rule 22
	id             shift, and enter state 7
			(reduce using rule 22)

	in             reduce using rule 22
	','            shift, and enter state 44
			(reduce using rule 22)

	';'            shift, and enter state 45
			(reduce using rule 22)

	'('            shift, and enter state 8
			(reduce using rule 22)

	')'            reduce using rule 22
	wild           shift, and enter state 9
			(reduce using rule 22)

	%eof           reduce using rule 22

	SimpleExpr     goto state 30
	ID             goto state 3
	ActualArgs     goto state 31

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 45
Number of terminals: 32
Number of non-terminals: 9
Number of states: 103
